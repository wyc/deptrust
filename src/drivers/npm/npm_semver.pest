// https://docs.npmjs.com/misc/semver#range-grammar on July 2020
// range-set  ::= range ( logical-or range ) *
// logical-or ::= ( ' ' ) * '||' ( ' ' ) *
// range      ::= hyphen | simple ( ' ' simple ) * | ''
// hyphen     ::= partial ' - ' partial
// simple     ::= primitive | partial | tilde | caret
// primitive  ::= ( '<' | '>' | '>=' | '<=' | '=' ) partial
// partial    ::= xr ( '.' xr ( '.' xr qualifier ? )? )?
// xr         ::= 'x' | 'X' | '*' | nr
// nr         ::= '0' | ['1'-'9'] ( ['0'-'9'] ) *
// tilde      ::= '~' partial
// caret      ::= '^' partial
// qualifier  ::= ( '-' pre )? ( '+' build )?
// pre        ::= parts
// build      ::= parts
// parts      ::= part ( '.' part ) *
// part       ::= nr | [-0-9A-Za-z]+
range_set = { range ~ (logical_or ~ range) * }
logical_or = { ( " " ) * ~ "||" ~ ( " " ) * }
// range expr flipped due to eager parsing of pest
range = { hyphen_range | simple ~ ( logical_and ~ simple ) * | "" }
logical_and = { " " }
hyphen_range = { partial ~ hyphen ~ partial }
hyphen = { " - " }
// simple and primitive expanded for parsing
simple = { primitive | partial | approx | compat }
primitive = { comparator ~ partial } // 
comparator = { gte | lte | gt | lt | eq }
gte = { ">=" }
lte = { "<=" }
gt = { ">" }
lt = { "<" }
eq = { "=" }
partial = { xr ~ ( "." ~ xr ~ ( "." ~ xr ~ qualifier ? ) ? ) ? }
xr = { "x" | "X" | "*" | nr }
nr = { "0" | '1'..'9' ~ ( '1'..'9' ) * }
// tilde and caret changed for LHS parsing
approx = { "~" ~ partial }
compat = { "^" ~ partial }
qualifier = { ( "-" ~ pre ) ? ~ ( "+" ~ build ) ? }
pre = { parts }
build = { parts }
parts = { part ~ ( "." ~ part ) * }
// part expr flipped due to eager parsing of pest
part = { ( ASCII_ALPHANUMERIC | "-" ) + | nr }
